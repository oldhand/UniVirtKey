---
- name: 创建临时目录存放依赖包
  file:
    path: "/tmp/packages"
    state: directory
    mode: '0755'

- name: 查找所有依赖包（deb）文件
  ansible.builtin.find:
    path: "{{ playbook_dir }}/packages/{{ ansible_distribution }}/{{ ansible_architecture }}/"
    patterns: '*.deb'
    recurse: no
  delegate_to: localhost
  register: deb_files
  run_once: true  # 仅在控制节点执行一次


- name: 复制依赖包到目标节点
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/packages/{{ ansible_distribution }}/{{ ansible_architecture }}/{{ item | basename }}"
    dest: "/home/packages/{{ item | basename }}"
    mode: '0644'
  with_items: "{{ deb_files.files | map(attribute='path') | list }}"
  when: deb_files.files | length > 0  # 确保只在有文件时执行


- name: Clean existing repodata
  file:
    path: "/home/packages/Packages.gz"
    state: absent
  when: (is_init is defined) and (is_init == 1)

- name: Generate repository metadata
  shell: cd /home/packages && sudo dpkg-scanpackages . /dev/null | gzip -9c > /home/packages/Packages.gz
  when: (is_init is defined) and (is_init == 1)

- name: 复制整个repo目录到各节点的/home目录
  copy:
    src: "/home/packages/Packages.gz"  # 源文件
    dest: "/home/packages/Packages.gz" # 目标文件
    mode: 0644
    force: yes             # 如果目标存在则覆盖
  when: is_worker == 1  # 所有节点都需要加载


- name: Get apt file - local.list
  copy:
    src: "local.list"
    dest: "/etc/apt/sources.list.d/local.list"


- name: 清理APT缓存
  apt:
    autoclean: yes

- name: 执行 apt 更新缓存
  apt:
    update_cache: yes
  register: apt_result
  retries: 3  # 重试3次，防止网络临时问题
  delay: 5    # 每次重试间隔5秒
  until: apt_result is succeeded
